/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package basiclibrary.basiclibrary;

import java.util.Arrays;
import java.util.Collections;
import java.util.HashSet;
import java.util.List;
import java.util.Set;

public class App {

    public static void main(String[] args) {
        int[] arr = { 1, 3, 4 };
        double[] doubleArr = { 1, 3, 4 };
        roll(5);
        System.out.println(containsDuplicates(arr));
       calculatingAverages(doubleArr);
       int[][] weeklyMonthTemperatures = {
        {66, 64, 58, 65, 71, 57, 60},
        {57, 65, 65, 70, 72, 65, 51},
        {55, 54, 60, 53, 59, 57, 61},
        {65, 56, 55, 52, 55, 62, 57}
};
arraysOfArrays(weeklyMonthTemperatures);

    }

    public static void roll(int n) {
        int[] diceRollingValues = new int[n];
        for (int i = 0; i < n; i++) {
            int diceValue = (int) Math.floor(Math.random() * 6 + 1);
            diceRollingValues[i] = diceValue;
        }
        System.out.println(Arrays.toString(diceRollingValues));
    }

    public static boolean containsDuplicates(int[] arr) {
        for (int i = 0; i < arr.length; i++) {
            for (int j = 0; j < arr.length; j++) {
                if (i != j) {
                    if (arr[i] == (arr[j])) {
                        return true;

                    }

                }
            }
        }
        return false;
    }

    public static void calculatingAverages(double[] arr) {
        int sum = 0;
        for (double el:arr) {
            sum +=el;
        }
       float  avg = (float)sum / (arr.length);
        System.out.println(avg); 
    }

    public static void arraysOfArrays(int[][] arr) {
        int[] tempArr = new int[arr[0].length];
        double sum = 0;
        double avg =0;
        double temp = 2147483647;
        for (int i = 0; i < arr.length; i++) {
            for (int j = 0; j < arr[i].length; j++) {
                sum += arr[i][j];
            }
            
            avg =sum/ arr[i].length;
            sum=0;
            System.out.println(avg);
            if (avg < temp) {
                for (int j = 0; j < arr[i].length; j++) {
                    tempArr[j] = arr[i][j];
                }
                temp= avg;
            }
        }
        System.out.println(Arrays.toString(tempArr));
    }

    public String analyzeWeatherData (int[][] arr){
//        use HashSet of type <Integer> to keep track
//        of unique temperatures seen
//        print out Min & Max Temp
//        print out string of Temps not seen during month (between min & max)

        HashSet<Integer> tempSet = new HashSet<>();

        for (int[] outer : arr){
            for (int vals : outer){
                tempSet.add(vals);
            }
        }

        int maxTemp = Collections.max(tempSet);
        int minTemp = Collections.min(tempSet);

        String ans = "High: " + maxTemp + "\n" +
                "Low: "  + minTemp + "\n" ;

        for (int i = minTemp; i < maxTemp; i++) {
            if (!tempSet.contains(i)) {
                ans += "Never saw temp: " + i + "\n";
            }
        }

        return ans;
    }

    public static String tally (List<String> votes){

        Set<String> uniqueVotes = new HashSet<>(votes);

        int winNum = Integer.MIN_VALUE;
        String winner = "";

        for (String candidate : uniqueVotes) {

            int votesNum = Collections.frequency(votes,candidate);

            if ( votesNum > winNum ){
                winner = candidate;
                winNum = votesNum;
            }
        }
        return winner;
    }
}
